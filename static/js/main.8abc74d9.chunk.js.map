{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","preState","setPreState","_useState3","_useState4","curState","setCurState","_useState5","_useState6","input","setInput","_useState7","_useState8","operator","setOperator","_useState9","_useState10","total","setTotal","inputNum","e","includes","target","innerText","pre","useEffect","operatorType","equals","cal","String","parseFloat","react_default","a","createElement","Fragment","className","react_number_format_es","value","displayType","thousandSeparator","onClick","charAt","substring","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8abc74d9.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport NumberFormat from \"react-number-format\";\n\nfunction App() {\n  const [preState, setPreState] = useState(\"\");\n  const [curState, setCurState] = useState(\"\");\n  const [input, setInput] = useState(\"0\");\n  const [operator, setOperator] = useState(null);\n  const [total, setTotal] = useState(false);\n\n  const inputNum = (e) => {\n    if (curState.includes(\".\") && e.target.innerText === \".\") return;\n\n    if (total) {\n      setPreState(\"\");\n    }\n\n    curState\n      ? setCurState((pre) => pre + e.target.innerText)\n      : setCurState(e.target.innerText);\n    setTotal(false);\n  };\n\n  useEffect(() => {\n    setInput(curState);\n  }, [curState]);\n\n  useEffect(() => {\n    setInput(\"0\");\n  }, []);\n  const operatorType = (e) => {\n    setTotal(false);\n    setOperator(e.target.innerText);\n    if (curState === \"\") return;\n    if (preState !== \"\") {\n      equals();\n    } else {\n      setPreState(curState);\n      setCurState(\"\");\n    }\n  };\n\n  const equals = (e) => {\n    if (e.target.innerText === \"=\") {\n      setTotal(true);\n    }\n    let cal;\n    switch (operator) {\n      case \"/\":\n        cal = String(parseFloat(preState) / parseFloat(curState));\n        break;\n\n      case \"+\":\n        cal = String(parseFloat(preState) + parseFloat(curState));\n        break;\n      case \"X\":\n        cal = String(parseFloat(preState) * parseFloat(curState));\n        break;\n      case \"-\":\n        cal = String(parseFloat(preState) - parseFloat(curState));\n        break;\n      default:\n        return;\n    }\n    setInput(\"\");\n    setPreState(cal);\n    setCurState(\"\");\n  };\n\n  const minusPlus = () => {\n    if (curState.charAt(0) === \"-\") {\n      setCurState(curState.substring(1));\n    } else {\n      setCurState(\"-\" + curState);\n    }\n  };\n\n  const percent = () => {\n    preState\n      ? setCurState(String((parseFloat(curState) / 100) * preState))\n      : setCurState(String(parseFloat(curState) / 100));\n  };\n\n  const reset = () => {\n    setPreState(\"\");\n    setCurState(\"\");\n    setInput(\"0\");\n  };\n  return (\n    <>\n    <div className='container'>\n      <div className='wrapper'>\n        <div className='screen'>\n          {input !== \"\" || input === \"0\" ? (\n            <NumberFormat\n              value={input}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          ) : (\n            <NumberFormat\n              value={preState}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          )}\n        </div>\n        <div className='btn light-gray' onClick={reset}>\n          AC\n        </div>\n        <div className='btn light-gray' onClick={percent}>\n          %\n        </div>\n        <div className='btn light-gray' onClick={minusPlus}>\n          +/-\n        </div>\n        <div className='btn orange' onClick={operatorType}>\n          /\n        </div>\n        <div className='btn' onClick={inputNum}>\n          7\n        </div>\n        <div className='btn' onClick={inputNum}>\n          8\n        </div>\n        <div className='btn' onClick={inputNum}>\n          9\n        </div>\n        <div className='btn orange' onClick={operatorType}>\n          X\n        </div>\n        <div className='btn' onClick={inputNum}>\n          4\n        </div>\n        <div className='btn' onClick={inputNum}>\n          5\n        </div>\n        <div className='btn' onClick={inputNum}>\n          6\n        </div>\n        <div className='btn orange' onClick={operatorType}>\n          +\n        </div>\n        <div className='btn' onClick={inputNum}>\n          1\n        </div>\n        <div className='btn' onClick={inputNum}>\n          2\n        </div>\n        <div className='btn' onClick={inputNum}>\n          3\n        </div>\n        <div className='btn orange' onClick={operatorType}>\n          -\n        </div>\n        <div className='btn zero' onClick={inputNum}>\n          0\n        </div>\n        <div className='btn' onClick={inputNum}>\n          .\n        </div>\n        <div className='btn orange' onClick={equals}>\n          =\n        </div>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}